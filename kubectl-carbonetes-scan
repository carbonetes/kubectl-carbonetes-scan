#!/usr/bin/env bash

######################################
# display the version of the plugin
######################################
display_version() {
  local VERSION
  VERSION="v1.0.0"
  cat <<EOF
Kubectl Carbonetes Scan $VERSION
EOF
}

#############################
# display an error message
#############################
error() {
    echo >&2 "${1}"
    cat <<EOF
Run "kubectl carbonetes-scan --help", to see the full list of commands
EOF
    exit 1
}

##############################################
# display when -h or --help flag is present
##############################################
usage() {
    local SELF
    SELF="kubectl carbonetes-scan"
    echo ""
    echo -e "\033[32mCarbonetes Scan: Security Tool for kubectl and oc\033[0m";
    cat <<EOF

This plugin provides comprehensive container analysis and policy evaluation as a fully managed service.
Carbonetes analyzes your container images for native code vulnerabilities, software composition analysis (SCA),
license types, secrets, and bill of materials.

Usage:
    $SELF [flags]

Flags:
  -A, --all-namespaces      : List all the unique images on all namespaces

  -h, --help                : help for kubectl-carbonetes-scan

  -i, --image <string>      : the image to be scanned

  -p, --password <string>   : Carbonetes account password

  -r, --registry <string>   : Registry Uri (Added in Carbonetes Web Application)

  -u, --username <string>   : Carbonetes account username

  -v, --version             : version for kubectl-carbonetes-scan


Use "$SELF --image <string> --registry <string> --username <string> --password <string>" to execute a complete container analysis.

You need a valid credentials in Carbonetes to use this plugin.
If you don't have it yet, you can register at: https://carbonetes.com

EOF
}

#################################
# Check if Docker is installed
#################################
checkDockerInstallation() {
    if [[ -x "$(command -v docker)" ]]; then
        echo "Docker is installed. Executing Carbonetes Complete Scan..."
        carbonetesScan
    else
        echo "You need to install Docker to use this plugin"
    fi
}

##########################################
# Validating all the required variables
##########################################
validation() {
  ########################
  # Required parameters
  ########################
  REGISTRY_URI=${REGISTRY_URI:?'REGISTRY_URI argument is missing.'}
  REPO_IMAGE_TAG=${REPO_IMAGE_TAG:?'REPO_IMAGE_TAG argument is missing.'}
  CARBONETES_USERNAME=${CARBONETES_USERNAME:?'CARBONETES_USERNAME argument is missing.'}
  CARBONETES_PASSWORD=${CARBONETES_PASSWORD:?'CARBONETES_PASSWORD argument is missing'}
}

######################
# Complete Analysis
######################
carbonetesScan() {
  ##################################################
  # Pull the Carbonetes Scan image from Dockerhub
  ##################################################
  docker pull carbonetes/carbonetes-scan:latest

  ##################################
  # Run the Carbonetes Scan image
  ##################################
  docker run \
  --env=REGISTRY_URI="$REGISTRY_URI" \
  --env=REPO_IMAGE_TAG="$REPO_IMAGE_TAG" \
  --env=CARBONETES_USERNAME="$CARBONETES_USERNAME" \
  --env=CARBONETES_PASSWORD="$CARBONETES_PASSWORD" \
  carbonetes/carbonetes-scan:latest
}

######################################
# Check if there is a running Pod
######################################
is_running() {
    declare -a phase
    local phases=(${phase[@]} $(kubectl get pod --all-namespaces -o jsonpath='{..phase}'))
    for p in "${phases[@]}";
      do
          if [[ "$p" != "Running" ]]; then
              echo "There is no Pod in Running phase ($p)"
              exit 1
          fi
    done
}

# Main function
main() {
    ###########################################################
    # Display an error image if there no image specified
    ###########################################################
    [ $# -eq 0 ] && error "You must specify an image to use this plugin"

    ###########################################################
    # arguments to be set to execute the comprehensive scan
    ###########################################################
    while [ $# -gt 0 ]; do
        case "$1" in
            -h | --help)
                usage
                exit
                ;;
            -i | --image)
                shift
                ################################################################
                # check if the specified image is existing inside the cluster
                ################################################################
                declare -a image
                images=(${image[@]} $(kubectl get pod --all-namespaces -o jsonpath="{..image}" | tr -s '[[:space:]]' '\n' | sort | uniq))
                for img in "${images[@]}"; do
                  if [[ "$img" == "$1" ]]; then
                      export found="1"
                  fi
                done

                if [[ $found != "1" ]]; then
                    echo ""
                    echo "The image you want to scan is not found inside your cluster."
                    exit 1
                else
                    export REPO_IMAGE_TAG=$1
                fi
                shift
                ;;
            -r | --registry)
                shift
                export REGISTRY_URI=$1
                shift
                ;;
            -u | --username) 
                shift
                export CARBONETES_USERNAME=$1
                shift
                ;;
            -p | --password)
                shift
                export CARBONETES_PASSWORD=$1
                shift
                ;;
            -A | --all-namespaces)
                ######################################
                # check if there is any pod running
                ######################################
                is_running

                #################################################
                # Get all the unique images inside the cluster
                #################################################
                kubectl get pod --all-namespaces -o jsonpath="{..image}" | tr -s '[[:space:]]' '\n' | sort | uniq
                exit  
                ;;
            -v | --version)
                display_version
                exit
                ;;
            *)
                error "Unknown command \"$1\""
                exit
                ;;
        esac
    done

  ######################################
  # check if there is any pod running
  ######################################
  is_running

  ##################################
  # Validate required parameters
  ##################################
  validation

  ########################################################################
  # Check if Docker is installed then execute Carbonetes Complete Scan
  ########################################################################
  checkDockerInstallation
}

main "$@"